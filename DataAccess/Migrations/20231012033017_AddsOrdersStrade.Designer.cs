// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(TradierDbContext))]
    [Migration("20231012033017_AddsOrdersStrade")]
    partial class AddsOrdersStrade
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Balances", b =>
                {
                    b.Property<int>("sId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("sId"));

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CashId")
                        .HasColumnType("int");

                    b.Property<float>("ClosePL")
                        .HasColumnType("real");

                    b.Property<float>("CurrentRequirement")
                        .HasColumnType("real");

                    b.Property<DateTime>("DateInserted")
                        .HasColumnType("datetime2");

                    b.Property<int>("Equity")
                        .HasColumnType("int");

                    b.Property<float>("LongMarketValue")
                        .HasColumnType("real");

                    b.Property<int>("MarginId")
                        .HasColumnType("int");

                    b.Property<float>("MarketValue")
                        .HasColumnType("real");

                    b.Property<float>("OpenPL")
                        .HasColumnType("real");

                    b.Property<float>("OptionLongValue")
                        .HasColumnType("real");

                    b.Property<float>("OptionRequirement")
                        .HasColumnType("real");

                    b.Property<float>("OptionShortValue")
                        .HasColumnType("real");

                    b.Property<int>("PatternDayTraderId")
                        .HasColumnType("int");

                    b.Property<float>("PendingCash")
                        .HasColumnType("real");

                    b.Property<int>("PendingOrdersCount")
                        .HasColumnType("int");

                    b.Property<float>("ShortMarketValue")
                        .HasColumnType("real");

                    b.Property<float>("StockLongValue")
                        .HasColumnType("real");

                    b.Property<float>("TotalCash")
                        .HasColumnType("real");

                    b.Property<float>("TotalEquity")
                        .HasColumnType("real");

                    b.Property<int>("UnclearedFunds")
                        .HasColumnType("int");

                    b.HasKey("sId");

                    b.HasIndex("AccountNumber")
                        .IsUnique()
                        .HasFilter("[AccountNumber] IS NOT NULL");

                    b.HasIndex("CashId")
                        .IsUnique();

                    b.HasIndex("MarginId")
                        .IsUnique();

                    b.HasIndex("PatternDayTraderId")
                        .IsUnique();

                    b.ToTable("Balances");
                });

            modelBuilder.Entity("Cash", b =>
                {
                    b.Property<int>("sId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("sId"));

                    b.Property<float>("CashAvailable")
                        .HasColumnType("real");

                    b.Property<int>("Sweep")
                        .HasColumnType("int");

                    b.Property<float>("UnsettledFunds")
                        .HasColumnType("real");

                    b.HasKey("sId");

                    b.ToTable("Cash");
                });

            modelBuilder.Entity("Margin", b =>
                {
                    b.Property<int>("sId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("sId"));

                    b.Property<int>("FedCall")
                        .HasColumnType("int");

                    b.Property<int>("MaintenanceCall")
                        .HasColumnType("int");

                    b.Property<float>("OptionBuyingPower")
                        .HasColumnType("real");

                    b.Property<float>("StockBuyingPower")
                        .HasColumnType("real");

                    b.Property<int>("StockShortValue")
                        .HasColumnType("int");

                    b.Property<int>("Sweep")
                        .HasColumnType("int");

                    b.HasKey("sId");

                    b.ToTable("Margin");
                });

            modelBuilder.Entity("PatternDayTrader", b =>
                {
                    b.Property<int>("sId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("sId"));

                    b.Property<int>("FedCall")
                        .HasColumnType("int");

                    b.Property<int>("MaintenanceCall")
                        .HasColumnType("int");

                    b.Property<float>("OptionBuyingPower")
                        .HasColumnType("real");

                    b.Property<float>("StockBuyingPower")
                        .HasColumnType("real");

                    b.Property<int>("StockShortValue")
                        .HasColumnType("int");

                    b.HasKey("sId");

                    b.ToTable("PatternDayTrader");
                });

            modelBuilder.Entity("Strade", b =>
                {
                    b.Property<int>("StradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StradeId"));

                    b.Property<DateTime>("Expry")
                        .HasColumnType("datetime2");

                    b.Property<float>("PNL")
                        .HasColumnType("real");

                    b.Property<int>("Strike")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StradeId");

                    b.ToTable("Strades");
                });

            modelBuilder.Entity("Tradier.Client.Models.Account.Leg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("AvgFillPrice")
                        .HasColumnType("real");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ExecQuantity")
                        .HasColumnType("real");

                    b.Property<float>("LastFillPrice")
                        .HasColumnType("real");

                    b.Property<float>("LastFillQuantity")
                        .HasColumnType("real");

                    b.Property<string>("OptionSymbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<float>("RemainingQuantity")
                        .HasColumnType("real");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Leg");
                });

            modelBuilder.Entity("Tradier.Client.Models.Account.Order", b =>
                {
                    b.Property<int>("StradeId")
                        .HasColumnType("int");

                    b.Property<float>("AvgFillPrice")
                        .HasColumnType("real");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ExecQuantity")
                        .HasColumnType("real");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<float>("LastFillPrice")
                        .HasColumnType("real");

                    b.Property<float>("LastFillQuantity")
                        .HasColumnType("real");

                    b.Property<int>("NumLegs")
                        .HasColumnType("int");

                    b.Property<string>("OptionSymbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<float>("RemainingQuantity")
                        .HasColumnType("real");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Strategy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StradeId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Balances", b =>
                {
                    b.HasOne("Cash", "Cash")
                        .WithOne()
                        .HasForeignKey("Balances", "CashId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Margin", "Margin")
                        .WithOne()
                        .HasForeignKey("Balances", "MarginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PatternDayTrader", "PatternDayTrader")
                        .WithOne()
                        .HasForeignKey("Balances", "PatternDayTraderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cash");

                    b.Navigation("Margin");

                    b.Navigation("PatternDayTrader");
                });

            modelBuilder.Entity("Tradier.Client.Models.Account.Leg", b =>
                {
                    b.HasOne("Tradier.Client.Models.Account.Order", null)
                        .WithMany("Legs")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Tradier.Client.Models.Account.Order", b =>
                {
                    b.HasOne("Strade", null)
                        .WithMany("Orders")
                        .HasForeignKey("StradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Strade", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Tradier.Client.Models.Account.Order", b =>
                {
                    b.Navigation("Legs");
                });
#pragma warning restore 612, 618
        }
    }
}
